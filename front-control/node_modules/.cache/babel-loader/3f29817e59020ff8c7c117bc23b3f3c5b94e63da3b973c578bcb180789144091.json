{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ateranp\\\\Documents\\\\Spring\\\\controlGastos\\\\front-control\\\\src\\\\components\\\\IngresoComponent\\\\IngresoForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport axios from \"axios\";\nimport IngresoFormView from \"./IngresoFormView\";\n\n/**\r\n * IngresoForm.jsx\r\n *\r\n * Componente contenedor que gestiona el estado del formulario de ingreso\r\n * y realiza la petición POST al backend para registrar un nuevo ingreso.\r\n *\r\n * <p>Al enviar el formulario, se construye un objeto `newIngreso` con los datos\r\n * del estado local y se envía a /api/ingreso.</p>\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst IngresoForm = () => {\n  _s();\n  // Estado local para los campos del formulario\n  const [concepto, setConcepto] = useState('');\n  const [monto, setMonto] = useState('');\n\n  /**\r\n   * Maneja el envío del formulario.\r\n   * Envía los datos al backend y limpia el formulario si la operación es exitosa.\r\n   *\r\n   * @param {Event} e - Evento de envío del formulario\r\n   */\n  const handleSubmit = e => {\n    e.preventDefault();\n    const newIngreso = {\n      concepto,\n      monto\n    };\n    axios.post(\"http://localhost:8080/api/ingreso\", newIngreso).then(response => {\n      console.log('Ingreso registrado', response.data);\n      setConcepto('');\n      setMonto('');\n    }).catch(error => {\n      console.error('Error al registrar ingreso', error);\n    });\n  };\n\n  // Renderiza la vista del formulario, pasando props controladas\n  return /*#__PURE__*/_jsxDEV(IngresoFormView, {\n    monto: monto,\n    concepto: concepto,\n    onMontoChange: e => setMonto(e.target.value),\n    onConceptoChange: e => setConcepto(e.target.value),\n    onSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(IngresoForm, \"G8QCpeJXuTyRFMnDLJVC/YUwqxU=\");\n_c = IngresoForm;\nexport default IngresoForm;\nvar _c;\n$RefreshReg$(_c, \"IngresoForm\");","map":{"version":3,"names":["React","useState","axios","IngresoFormView","jsxDEV","_jsxDEV","IngresoForm","_s","concepto","setConcepto","monto","setMonto","handleSubmit","e","preventDefault","newIngreso","post","then","response","console","log","data","catch","error","onMontoChange","target","value","onConceptoChange","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ateranp/Documents/Spring/controlGastos/front-control/src/components/IngresoComponent/IngresoForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport IngresoFormView from \"./IngresoFormView\";\r\n\r\n/**\r\n * IngresoForm.jsx\r\n *\r\n * Componente contenedor que gestiona el estado del formulario de ingreso\r\n * y realiza la petición POST al backend para registrar un nuevo ingreso.\r\n *\r\n * <p>Al enviar el formulario, se construye un objeto `newIngreso` con los datos\r\n * del estado local y se envía a /api/ingreso.</p>\r\n */\r\nconst IngresoForm = () => {\r\n  // Estado local para los campos del formulario\r\n  const [concepto, setConcepto] = useState('');\r\n  const [monto, setMonto] = useState('');\r\n\r\n  /**\r\n   * Maneja el envío del formulario.\r\n   * Envía los datos al backend y limpia el formulario si la operación es exitosa.\r\n   *\r\n   * @param {Event} e - Evento de envío del formulario\r\n   */\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newIngreso = { concepto, monto };\r\n\r\n    axios.post(\"http://localhost:8080/api/ingreso\", newIngreso)\r\n      .then(response => {\r\n        console.log('Ingreso registrado', response.data);\r\n        setConcepto('');\r\n        setMonto('');\r\n      })\r\n      .catch(error => {\r\n        console.error('Error al registrar ingreso', error);\r\n      });\r\n  };\r\n\r\n  // Renderiza la vista del formulario, pasando props controladas\r\n  return (\r\n    <IngresoFormView\r\n      monto={monto}\r\n      concepto={concepto}\r\n      onMontoChange={(e) => setMonto(e.target.value)}\r\n      onConceptoChange={(e) => setConcepto(e.target.value)}\r\n      onSubmit={handleSubmit}\r\n    />\r\n  );\r\n};\r\n\r\nexport default IngresoForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,eAAe,MAAM,mBAAmB;;AAE/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA,SAAAC,MAAA,IAAAC,OAAA;AASA,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;;EAEtC;AACF;AACA;AACA;AACA;AACA;EACE,MAAMW,YAAY,GAAIC,CAAC,IAAK;IAC1BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,MAAMC,UAAU,GAAG;MAAEP,QAAQ;MAAEE;IAAM,CAAC;IAEtCR,KAAK,CAACc,IAAI,CAAC,mCAAmC,EAAED,UAAU,CAAC,CACxDE,IAAI,CAACC,QAAQ,IAAI;MAChBC,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEF,QAAQ,CAACG,IAAI,CAAC;MAChDZ,WAAW,CAAC,EAAE,CAAC;MACfE,QAAQ,CAAC,EAAE,CAAC;IACd,CAAC,CAAC,CACDW,KAAK,CAACC,KAAK,IAAI;MACdJ,OAAO,CAACI,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACN,CAAC;;EAED;EACA,oBACElB,OAAA,CAACF,eAAe;IACdO,KAAK,EAAEA,KAAM;IACbF,QAAQ,EAAEA,QAAS;IACnBgB,aAAa,EAAGX,CAAC,IAAKF,QAAQ,CAACE,CAAC,CAACY,MAAM,CAACC,KAAK,CAAE;IAC/CC,gBAAgB,EAAGd,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACY,MAAM,CAACC,KAAK,CAAE;IACrDE,QAAQ,EAAEhB;EAAa;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEN,CAAC;AAACzB,EAAA,CArCID,WAAW;AAAA2B,EAAA,GAAX3B,WAAW;AAuCjB,eAAeA,WAAW;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}