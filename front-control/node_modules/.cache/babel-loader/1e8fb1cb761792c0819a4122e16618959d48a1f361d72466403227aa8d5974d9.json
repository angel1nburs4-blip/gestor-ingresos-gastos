{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ateranp\\\\Documents\\\\Spring\\\\controlGastos\\\\front-control\\\\src\\\\components\\\\RegistroComponent\\\\RegisterComponent.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport RegisterCompView from \"./RegisterCompView\";\n\n/**\r\n * Register.jsx\r\n *\r\n * Componente contenedor que gestiona el estado del formulario de registro\r\n * y realiza la petición POST al backend para crear un nuevo usuario.\r\n *\r\n * Estado:\r\n * - username: string — nombre de usuario ingresado\r\n * - password: string — contraseña ingresada\r\n * - message: string | null — mensaje de éxito o error tras el intento de registro\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = () => {\n  _s();\n  const [username, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  /**\r\n   * Maneja el envío del formulario de registro.\r\n   * Envía los datos al backend y actualiza el estado con el resultado.\r\n   *\r\n   * @param {Event} e - Evento de envío del formulario\r\n   */\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const answer = await axios.post(\"http://localhost:8080/auth/register\", {\n        username,\n        password\n      });\n      setMessage(answer.data); // Mensaje de éxito desde el backend\n      setUserName(\"\");\n      setPassword(\"\");\n    } catch (err) {\n      var _err$response;\n      // Mensaje de error desde el backend o genérico\n      setMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || \"Error\");\n    }\n  };\n\n  // Renderiza la vista del formulario, pasando props controladas\n  return /*#__PURE__*/_jsxDEV(RegisterCompView, {\n    userName: username,\n    password: password,\n    onUserNameChange: e => setUserName(e.target.value),\n    onPasswordChange: e => setPassword(e.target.value),\n    onSubmit: handleSubmit,\n    message: message // Puedes mostrar este mensaje en la vista si lo deseas\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"yvX2tueBbfU2+hdDAZ62CSQmLYc=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","axios","RegisterCompView","jsxDEV","_jsxDEV","Register","_s","username","setUserName","password","setPassword","message","setMessage","handleSubmit","e","preventDefault","answer","post","data","err","_err$response","response","userName","onUserNameChange","target","value","onPasswordChange","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ateranp/Documents/Spring/controlGastos/front-control/src/components/RegistroComponent/RegisterComponent.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport RegisterCompView from \"./RegisterCompView\";\r\n\r\n/**\r\n * Register.jsx\r\n *\r\n * Componente contenedor que gestiona el estado del formulario de registro\r\n * y realiza la petición POST al backend para crear un nuevo usuario.\r\n *\r\n * Estado:\r\n * - username: string — nombre de usuario ingresado\r\n * - password: string — contraseña ingresada\r\n * - message: string | null — mensaje de éxito o error tras el intento de registro\r\n */\r\nconst Register = () => {\r\n    const [username, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [message, setMessage] = useState(null);\r\n\r\n    /**\r\n     * Maneja el envío del formulario de registro.\r\n     * Envía los datos al backend y actualiza el estado con el resultado.\r\n     *\r\n     * @param {Event} e - Evento de envío del formulario\r\n     */\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            const answer = await axios.post(\"http://localhost:8080/auth/register\", {\r\n                username,\r\n                password,\r\n            });\r\n\r\n            setMessage(answer.data); // Mensaje de éxito desde el backend\r\n            setUserName(\"\");\r\n            setPassword(\"\");\r\n        } catch (err) {\r\n            // Mensaje de error desde el backend o genérico\r\n            setMessage(err.response?.data || \"Error\");\r\n        }\r\n    };\r\n\r\n    // Renderiza la vista del formulario, pasando props controladas\r\n    return (\r\n        <RegisterCompView\r\n            userName={username}\r\n            password={password}\r\n            onUserNameChange={(e) => setUserName(e.target.value)}\r\n            onPasswordChange={(e) => setPassword(e.target.value)}\r\n            onSubmit={handleSubmit}\r\n            message={message} // Puedes mostrar este mensaje en la vista si lo deseas\r\n        />\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,oBAAoB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAVA,SAAAC,MAAA,IAAAC,OAAA;AAWA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAE5C;AACJ;AACA;AACA;AACA;AACA;EACI,MAAMa,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACA,MAAMC,MAAM,GAAG,MAAMf,KAAK,CAACgB,IAAI,CAAC,qCAAqC,EAAE;QACnEV,QAAQ;QACRE;MACJ,CAAC,CAAC;MAEFG,UAAU,CAACI,MAAM,CAACE,IAAI,CAAC,CAAC,CAAC;MACzBV,WAAW,CAAC,EAAE,CAAC;MACfE,WAAW,CAAC,EAAE,CAAC;IACnB,CAAC,CAAC,OAAOS,GAAG,EAAE;MAAA,IAAAC,aAAA;MACV;MACAR,UAAU,CAAC,EAAAQ,aAAA,GAAAD,GAAG,CAACE,QAAQ,cAAAD,aAAA,uBAAZA,aAAA,CAAcF,IAAI,KAAI,OAAO,CAAC;IAC7C;EACJ,CAAC;;EAED;EACA,oBACId,OAAA,CAACF,gBAAgB;IACboB,QAAQ,EAAEf,QAAS;IACnBE,QAAQ,EAAEA,QAAS;IACnBc,gBAAgB,EAAGT,CAAC,IAAKN,WAAW,CAACM,CAAC,CAACU,MAAM,CAACC,KAAK,CAAE;IACrDC,gBAAgB,EAAGZ,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACU,MAAM,CAACC,KAAK,CAAE;IACrDE,QAAQ,EAAEd,YAAa;IACvBF,OAAO,EAAEA,OAAQ,CAAC;EAAA;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrB,CAAC;AAEV,CAAC;AAACzB,EAAA,CAxCID,QAAQ;AAAA2B,EAAA,GAAR3B,QAAQ;AA0Cd,eAAeA,QAAQ;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}