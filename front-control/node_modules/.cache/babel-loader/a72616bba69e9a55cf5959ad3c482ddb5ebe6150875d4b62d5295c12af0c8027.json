{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ateranp\\\\Documents\\\\Spring\\\\controlGastos\\\\front-control\\\\src\\\\components\\\\RegistroComponent\\\\RegisterComponent.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport RegisterCompView from \"./RegisterCompView\";\n\n/**\r\n * Register.jsx\r\n *\r\n * Componente contenedor que gestiona el estado del formulario de registro\r\n * y realiza la petición POST al backend para crear un nuevo usuario.\r\n *\r\n * Este componente encapsula la lógica de interacción con el servidor,\r\n * maneja el estado local de los campos del formulario y delega la presentación\r\n * a `RegisterCompView`, manteniendo una separación clara entre lógica y vista.\r\n *\r\n * Props:\r\n * - setShowRegister: function — permite alternar entre la vista de registro y login.\r\n *\r\n * Estado:\r\n * - username: string — valor actual del campo \"Usuario\".\r\n * - password: string — valor actual del campo \"Contraseña\".\r\n * - message: string | null — mensaje de éxito o error tras el intento de registro.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Register = ({\n  setShowRegister\n}) => {\n  _s();\n  // Estado local para los campos del formulario\n  const [username, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [message, setMessage] = useState(null);\n\n  /**\r\n   * handleSubmit\r\n   *\r\n   * Función que se ejecuta al enviar el formulario.\r\n   * Realiza una petición POST al endpoint /auth/register con los datos ingresados.\r\n   * Si el registro es exitoso, muestra un mensaje y redirige al login tras 1.5 segundos.\r\n   * Si ocurre un error, muestra el mensaje de error recibido desde el backend.\r\n   *\r\n   * @param {React.FormEvent<HTMLFormElement>} e - Evento de envío del formulario.\r\n   */\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      // Envío de datos al backend\n      await axios.post(\"http://localhost:8080/auth/register\", {\n        username,\n        password\n      });\n\n      // Mensaje de éxito y redirección al login\n      setMessage(\"Registro exitoso\");\n      setTimeout(() => {\n        setMessage(null);\n        setShowRegister(false); // Cambia la vista a login\n      }, 1500);\n\n      // Limpieza de campos\n      setUserName(\"\");\n      setPassword(\"\");\n    } catch (err) {\n      var _err$response;\n      // Captura de errores del backend\n      setMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : _err$response.data) || \"Error al registrar\");\n    }\n  };\n\n  /**\r\n   * Renderiza el componente de vista `RegisterCompView`,\r\n   * pasando los valores y handlers necesarios como props controladas.\r\n   */\n  return /*#__PURE__*/_jsxDEV(RegisterCompView, {\n    userName: username,\n    password: password,\n    onUserNameChange: e => setUserName(e.target.value),\n    onPasswordChange: e => setPassword(e.target.value),\n    onSubmit: handleSubmit,\n    message: message,\n    setShowRegister: setShowRegister\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n};\n_s(Register, \"yvX2tueBbfU2+hdDAZ62CSQmLYc=\");\n_c = Register;\nexport default Register;\nvar _c;\n$RefreshReg$(_c, \"Register\");","map":{"version":3,"names":["useState","axios","RegisterCompView","jsxDEV","_jsxDEV","Register","setShowRegister","_s","username","setUserName","password","setPassword","message","setMessage","handleSubmit","e","preventDefault","post","setTimeout","err","_err$response","response","data","userName","onUserNameChange","target","value","onPasswordChange","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ateranp/Documents/Spring/controlGastos/front-control/src/components/RegistroComponent/RegisterComponent.js"],"sourcesContent":["import { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport RegisterCompView from \"./RegisterCompView\";\r\n\r\n/**\r\n * Register.jsx\r\n *\r\n * Componente contenedor que gestiona el estado del formulario de registro\r\n * y realiza la petición POST al backend para crear un nuevo usuario.\r\n *\r\n * Este componente encapsula la lógica de interacción con el servidor,\r\n * maneja el estado local de los campos del formulario y delega la presentación\r\n * a `RegisterCompView`, manteniendo una separación clara entre lógica y vista.\r\n *\r\n * Props:\r\n * - setShowRegister: function — permite alternar entre la vista de registro y login.\r\n *\r\n * Estado:\r\n * - username: string — valor actual del campo \"Usuario\".\r\n * - password: string — valor actual del campo \"Contraseña\".\r\n * - message: string | null — mensaje de éxito o error tras el intento de registro.\r\n */\r\nconst Register = ({ setShowRegister }) => {\r\n    // Estado local para los campos del formulario\r\n    const [username, setUserName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [message, setMessage] = useState(null);\r\n\r\n    /**\r\n     * handleSubmit\r\n     *\r\n     * Función que se ejecuta al enviar el formulario.\r\n     * Realiza una petición POST al endpoint /auth/register con los datos ingresados.\r\n     * Si el registro es exitoso, muestra un mensaje y redirige al login tras 1.5 segundos.\r\n     * Si ocurre un error, muestra el mensaje de error recibido desde el backend.\r\n     *\r\n     * @param {React.FormEvent<HTMLFormElement>} e - Evento de envío del formulario.\r\n     */\r\n    const handleSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        try {\r\n            // Envío de datos al backend\r\n            await axios.post(\"http://localhost:8080/auth/register\", {\r\n                username,\r\n                password,\r\n            });\r\n\r\n            // Mensaje de éxito y redirección al login\r\n            setMessage(\"Registro exitoso\");\r\n\r\n            setTimeout(() => {\r\n                setMessage(null);\r\n                setShowRegister(false); // Cambia la vista a login\r\n            }, 1500);\r\n\r\n            // Limpieza de campos\r\n            setUserName(\"\");\r\n            setPassword(\"\");\r\n        } catch (err) {\r\n            // Captura de errores del backend\r\n            setMessage(err.response?.data || \"Error al registrar\");\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Renderiza el componente de vista `RegisterCompView`,\r\n     * pasando los valores y handlers necesarios como props controladas.\r\n     */\r\n    return (\r\n        <RegisterCompView\r\n            userName={username}\r\n            password={password}\r\n            onUserNameChange={(e) => setUserName(e.target.value)}\r\n            onPasswordChange={(e) => setPassword(e.target.value)}\r\n            onSubmit={handleSubmit}\r\n            message={message}\r\n            setShowRegister={setShowRegister}\r\n        />\r\n    );\r\n};\r\n\r\nexport default Register;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,gBAAgB,MAAM,oBAAoB;;AAEjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA,SAAAC,MAAA,IAAAC,OAAA;AAkBA,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EACtC;EACA,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;;EAE5C;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,MAAMc,YAAY,GAAG,MAAOC,CAAC,IAAK;IAC9BA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACA;MACA,MAAMf,KAAK,CAACgB,IAAI,CAAC,qCAAqC,EAAE;QACpDT,QAAQ;QACRE;MACJ,CAAC,CAAC;;MAEF;MACAG,UAAU,CAAC,kBAAkB,CAAC;MAE9BK,UAAU,CAAC,MAAM;QACbL,UAAU,CAAC,IAAI,CAAC;QAChBP,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;MAC5B,CAAC,EAAE,IAAI,CAAC;;MAER;MACAG,WAAW,CAAC,EAAE,CAAC;MACfE,WAAW,CAAC,EAAE,CAAC;IACnB,CAAC,CAAC,OAAOQ,GAAG,EAAE;MAAA,IAAAC,aAAA;MACV;MACAP,UAAU,CAAC,EAAAO,aAAA,GAAAD,GAAG,CAACE,QAAQ,cAAAD,aAAA,uBAAZA,aAAA,CAAcE,IAAI,KAAI,oBAAoB,CAAC;IAC1D;EACJ,CAAC;;EAED;AACJ;AACA;AACA;EACI,oBACIlB,OAAA,CAACF,gBAAgB;IACbqB,QAAQ,EAAEf,QAAS;IACnBE,QAAQ,EAAEA,QAAS;IACnBc,gBAAgB,EAAGT,CAAC,IAAKN,WAAW,CAACM,CAAC,CAACU,MAAM,CAACC,KAAK,CAAE;IACrDC,gBAAgB,EAAGZ,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACU,MAAM,CAACC,KAAK,CAAE;IACrDE,QAAQ,EAAEd,YAAa;IACvBF,OAAO,EAAEA,OAAQ;IACjBN,eAAe,EAAEA;EAAgB;IAAAuB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEV,CAAC;AAACzB,EAAA,CA1DIF,QAAQ;AAAA4B,EAAA,GAAR5B,QAAQ;AA4Dd,eAAeA,QAAQ;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}