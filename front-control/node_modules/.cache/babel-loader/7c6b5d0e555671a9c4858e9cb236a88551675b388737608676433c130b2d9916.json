{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ateranp\\\\Documents\\\\Spring\\\\controlGastos\\\\front-control\\\\src\\\\components\\\\LoginComponent\\\\LoginForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport LoginFormView from './LoginFormView';\n\n/**\r\n * LoginForm.jsx\r\n *\r\n * Componente contenedor que gestiona el estado del formulario de login\r\n * y realiza la autenticación contra el backend.\r\n *\r\n * @param {function} setToken - Función para actualizar el token en el estado global\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LoginForm = ({\n  setToken\n}) => {\n  _s();\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n\n  /**\r\n   * Maneja el envío del formulario de login.\r\n   * Envía credenciales al backend y guarda el token si la autenticación es exitosa.\r\n   *\r\n   * @param {Event} e - Evento de envío del formulario\r\n   */\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      console.log(\"Enviando login:\", username, password);\n      const {\n        data\n      } = await axios.post('http://localhost:8080/auth/login', {\n        username,\n        password\n      });\n      setToken(data); // Actualiza el estado global con el token\n      localStorage.setItem(\"token\", data); // Persiste el token en localStorage\n      alert(\"Login successful\");\n    } catch (error) {\n      console.error(\"Error en login:\", error);\n      alert(\"Invalid username or password\");\n    }\n  };\n\n  // Renderiza la vista del formulario, pasando props controladas\n  return /*#__PURE__*/_jsxDEV(LoginFormView, {\n    username: username,\n    password: password,\n    onUserNameChange: e => setUsername(e.target.value),\n    onPasswordChange: e => setPassword(e.target.value),\n    onSubmit: handleSubmit\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(LoginForm, \"wuQOK7xaXdVz4RMrZQhWbI751Oc=\");\n_c = LoginForm;\nexport default LoginForm;\nvar _c;\n$RefreshReg$(_c, \"LoginForm\");","map":{"version":3,"names":["React","useState","axios","LoginFormView","jsxDEV","_jsxDEV","LoginForm","setToken","_s","username","setUsername","password","setPassword","handleSubmit","e","preventDefault","console","log","data","post","localStorage","setItem","alert","error","onUserNameChange","target","value","onPasswordChange","onSubmit","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/ateranp/Documents/Spring/controlGastos/front-control/src/components/LoginComponent/LoginForm.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport LoginFormView from './LoginFormView';\r\n\r\n/**\r\n * LoginForm.jsx\r\n *\r\n * Componente contenedor que gestiona el estado del formulario de login\r\n * y realiza la autenticación contra el backend.\r\n *\r\n * @param {function} setToken - Función para actualizar el token en el estado global\r\n */\r\nconst LoginForm = ({ setToken }) => {\r\n  const [username, setUsername] = useState('');\r\n  const [password, setPassword] = useState('');\r\n\r\n  /**\r\n   * Maneja el envío del formulario de login.\r\n   * Envía credenciales al backend y guarda el token si la autenticación es exitosa.\r\n   *\r\n   * @param {Event} e - Evento de envío del formulario\r\n   */\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      console.log(\"Enviando login:\", username, password);\r\n\r\n      const { data } = await axios.post(\r\n        'http://localhost:8080/auth/login',\r\n        { username, password }\r\n      );\r\n\r\n      setToken(data); // Actualiza el estado global con el token\r\n      localStorage.setItem(\"token\", data); // Persiste el token en localStorage\r\n      alert(\"Login successful\");\r\n    } catch (error) {\r\n      console.error(\"Error en login:\", error);\r\n      alert(\"Invalid username or password\");\r\n    }\r\n  };\r\n\r\n  // Renderiza la vista del formulario, pasando props controladas\r\n  return (\r\n    <LoginFormView\r\n      username={username}\r\n      password={password}\r\n      onUserNameChange={(e) => setUsername(e.target.value)}\r\n      onPasswordChange={(e) => setPassword(e.target.value)}\r\n      onSubmit={handleSubmit}\r\n    />\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;;AAE3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA,SAAAC,MAAA,IAAAC,OAAA;AAQA,MAAMC,SAAS,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;;EAE5C;AACF;AACA;AACA;AACA;AACA;EACE,MAAMY,YAAY,GAAG,MAAOC,CAAC,IAAK;IAChCA,CAAC,CAACC,cAAc,CAAC,CAAC;IAElB,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAER,QAAQ,EAAEE,QAAQ,CAAC;MAElD,MAAM;QAAEO;MAAK,CAAC,GAAG,MAAMhB,KAAK,CAACiB,IAAI,CAC/B,kCAAkC,EAClC;QAAEV,QAAQ;QAAEE;MAAS,CACvB,CAAC;MAEDJ,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAC;MAChBE,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAAC,CAAC,CAAC;MACrCI,KAAK,CAAC,kBAAkB,CAAC;IAC3B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdP,OAAO,CAACO,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvCD,KAAK,CAAC,8BAA8B,CAAC;IACvC;EACF,CAAC;;EAED;EACA,oBACEjB,OAAA,CAACF,aAAa;IACZM,QAAQ,EAAEA,QAAS;IACnBE,QAAQ,EAAEA,QAAS;IACnBa,gBAAgB,EAAGV,CAAC,IAAKJ,WAAW,CAACI,CAAC,CAACW,MAAM,CAACC,KAAK,CAAE;IACrDC,gBAAgB,EAAGb,CAAC,IAAKF,WAAW,CAACE,CAAC,CAACW,MAAM,CAACC,KAAK,CAAE;IACrDE,QAAQ,EAAEf;EAAa;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAEN,CAAC;AAACxB,EAAA,CAxCIF,SAAS;AAAA2B,EAAA,GAAT3B,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}